/**
 * Created by six on 2016/9/23.
 */
var main = new
    function () {
        this.scene = !1,
            this.buffer = !1,
            this.box = !1,
            this.boxUser = !1,
            this.boxUserScale = .7,
            this.boxAnimation = !1,
            this.boxAnimationScale = .75,
            this.textAnimation = !1,
            this.textAnimationScale = .68,
            this.linesData = !1,
            this.indexData = !1,
            this.hd = Math.PI / 180,
            this.window = $(window),
            this.pieces = 20,
            this.pieceWidth = 134,
            this.pieceRepair = .4,
            this.pieceAngle = !1,
            this.pieceRadius = !1,
            this.alpha = 60,
            this.alphaSpeed = .2,
            this.beta = 0,
            this.betaSpeed = .05,
            this.betaLimit = [-20, 20],
            this.dirLastAlphaValue = 0,
            this.dirLastBetaValue = 0,
            this.dirLastBetaValueBak = !1,
            this.dirFirstAlphaValue = !1,
            this.dirFirstBetaValue = !1,
            this.cameraAllow = !0,
            this.cameraStart = 100,
            this.cameraLimit = [0, 100],
            this.cameraSpeed = .3,
            this.cameraBack = 2,
            this.touch = !1,
            this.touchLast = !1,
            this.clickObjects = [],
            this.clickRangle = 10,
            this.activeObject = !1,
            this.activeTouch = !1,
            this.activeTouchLast = !1,
            this.activeAlphaSpeed = .2,
            this.activeBetaSpeed = .2,
            this.orienter,
            this.dir,
            this.dirSpeed,
            this.dirSpeedRate = .01,
            this.dirObjects = [],
            this.activeLimitAlpha = 20,
            this.activeLimitBeta = 30,
            this.animationTask = [],
            this.animationPX = 1,
            this.animationDomTask = [],
            this.isplay;
    };


main.init = function () {
        this.isplay=[true,false,false];
        this.scene = new C3D.Stage,
        this.scene.size(640, 640 * main.window.height() / main.window.width()).update(),
        document.body.appendChild(this.scene.el),
        window.onresize = function () {
            main.scene.size(640, 640 * main.window.height() / main.window.width()).update()
        },
        this.pieceAngle = 360 / this.pieces,
        this.pieceRadius = this.getPieceRadius(this.pieceWidth, this.pieceAngle + .4),
        this.scene.camera.z = this.cameraStart,
        this.cameraLimit[0] += this.cameraStart,
        this.cameraLimit[1] += this.cameraStart,
        this.box = new C3D.Sprite,
        this.scene.addChild(this.box),
        this.box.scale(0, 0, 0).position(0, -550, -2e3).rotation(this.beta, this.alpha, 0).update(),
        this.boxUser = new C3D.Sprite,
        this.boxUser.scale(this.boxUserScale, this.boxUserScale, this.boxUserScale).update(),
        this.box.addChild(this.boxUser),
        this.boxAnimation = new C3D.Sprite,
        this.boxAnimation.scale(this.boxAnimationScale, this.boxAnimationScale, this.boxAnimationScale).update(),
        this.box.addChild(this.boxAnimation),
        this.textAnimation = new C3D.Sprite,
        this.textAnimation.scale(this.textAnimationScale, this.textAnimationScale, this.textAnimationScale).update(),
        this.box.addChild(this.textAnimation),
        this.orienter = new Orienter,
        this.orienter.handler = function (a) {
            main.orienterWork(a)
        },
        this.orienter.init()
},
    main.skyBox = function () {
        var a, b;
        for (a = 0; a < this.pieces; a++)
            b = new Image,
            b.src = "images/" + (a + 1) + ".png",
            b.angle = a * this.pieceAngle,
            b.onload = function () {
                var a = new C3D.Plane,
                    b = main.getPiecePosition(this.angle, main.pieceRadius);
                a.size(this.width, this.height, 0).position(b.x, b.y, -b.z).rotation(0, -this.angle, 0).material({
                    image: this.src
                }).update(),
                    main.box.addChild(a)
            }
    },
    main.lines = function () {
        this.linesData = {
            start: [{
                width: 0,
                height: 226
            },
                {
                    width: 278,
                    height: 0
                },
                {
                    width: 0,
                    height: 300
                },
                {
                    width: 0,
                    height: 0
                },
                {
                    width: 85,
                    height: 0
                },
                {
                    width: 0,
                    height: 188
                },
                {
                    width: 62,
                    height: 0,
                    top: 621
                },
                {
                    width: 117,
                    height: 0
                },
                {
                    width: 0,
                    height: 169
                },
                {
                    width: 0,
                    height: 0
                },
                {
                    width: 0,
                    height: 0
                }],
            end: [{
                width: 486,
                height: 226
            },
                {
                    width: 278,
                    height: 306
                },
                {
                    width: 887,
                    height: 300
                },
                {
                    width: 57,
                    height: 17
                },
                {
                    width: 85,
                    height: 242
                },
                {
                    width: 377,
                    height: 188
                },
                {
                    width: 62,
                    height: 176,
                    top: 446
                },
                {
                    width: 117,
                    height: 202
                },
                {
                    width: 362,
                    height: 169
                },
                {
                    width: 87,
                    height: 228
                },
                {
                    width: 635,
                    height: 185
                }],
            limits: [70, 70, 140, 10, 60, 100, 30, 30, 60, 50],
            lines: {
                start: [{
                    left: 0
                },
                    {
                        left: 0
                    },
                    {
                        left: -200
                    },
                    {
                        left: -800
                    },
                    {
                        left: -800
                    },
                    {
                        left: -850
                    },
                    {
                        left: -1300
                    },
                    {
                        left: -1350
                    },
                    {
                        left: -1400
                    },
                    {
                        left: -1600
                    }],
                end: [{
                    left: 0
                },
                    {
                        left: -200
                    },
                    {
                        left: -800
                    },
                    {
                        left: -800
                    },
                    {
                        left: -850
                    },
                    {
                        left: -1300
                    },
                    {
                        left: -1350
                    },
                    {
                        left: -1400
                    },
                    {
                        left: -1600
                    },
                    {
                        left: -1930
                    }]
            },
            types: ["linear", "linear", "linear", "linear", "linear", "linear", "linear", "linear", "linear", "linear", "linear"],
            musics: [100, 800, 1500, 2300, 3e3, 3500, 4e3, 5e3, 5500, 6e3, 6700, 7500, 8e3],
            musicsType: ["music_f1_animation", "music_f2_animation", "music_f3_animation", "music_f4_animation", "music_f5_animation", "music_f6_animation", "music_f7_animation", "music_f1_animation", "music_f5_animation", "music_f2_animation", "music_f6_animation", "music_f7_animation", "music_f7_animation"]
        }
    },
    main.getDelay = function (a) {
        var c, b = 0;
        if (0 == a) b = 0;
        else for (c = 0; a > c; c++) b += this.linesData.limits[c];
        return b
    },
    main.initIndexData = function () {
        this.indexData = {
            one: [{
                objs: ["star21", "star22"],
                limit: 15
            },{
                objs: ["star27", "star28"],
                limit: 40
            },{
                objs: ["star35", "star36"],
                limit: 40
            },{
                objs: ["star45","star46", "star47", "star48", "star49"],
                limit: 40
            },
                {
                    objs: ["star59", "star60"],
                    limit: 40
                },
                {
                    objs: ["star37", "star38"],
                    limit: 40
                }
                ,
                {
                    objs: ["star50", "star51","star52", "star53"],
                    limit: 40
                }
                ,
                {
                    objs: ["star39", "star40"],
                    limit: 40
                }
                ,
                {
                    objs: ["star41", "star42"],
                    limit: 40
                }
                ,
                {
                    objs: ["star55", "star56", "star57", "star58"],
                    limit: 40
                },
                {
                    objs: ["star29", "star30", "star31", "star32", "star33", "star34"],
                    limit: 40
                },
                {
                    objs: ["star61", "star62"],
                    limit: 10
                },
                {
                    objs: ["star63", "star64", "star65"],
                    limit: 10
                }],
            two: [{
                objs: ["star41", "star42"],
                limit: 15
            },
                {
                    objs: ["star48", "star49"],
                    limit: 15
                }],
            three: [{
                objs: ["star43", "star44"],
                limit: 15
            },
                {
                    objs: ["star47", "star30"],
                    limit: 15
                }],
            four: [{
                objs: ["star45", "star46"],
                limit: 15
            },
                {
                    objs: ["star54", "star55"],
                    limit: 15
                }],
            qq: [{
                objs: ["star38", "star56"],
                limit: 15
            }]
        }
    },
    main.setIndexAnimation = function (a) {
        var b, c;
        a = a ? a : "one";
        for (x in this.indexData) if (b = this.indexData[x], x == a) for (c = 0; c < b.length; c++) main.addDomAnimation(main.getPiece(b[c].objs[0]), {
            starType: !0,
            starObjs: b[c].objs,
            limit: b[c].limit
        })
    },
    main.cameraInit = function () {
        this.window.bind("touchstart", function (a) {
                a.preventDefault(),
                main.objectClickWork(a)
        }),
        this.window.bind("touchmove", function (a) {
                a.preventDefault(),
                main.cameraTouchmove(a)


           //yMusic(4);
        }),
        this.window.bind("touchend", function () {
            main.cameraTouchend()
        }),
        this.cameraUpdate()
    },
     main.playMusic= function (type) {
         var bgSound=document.getElementById("bgSound");
         var rain=document.getElementById("rain");
         var sand=document.getElementById("sand");
         if(type==1){
             sand.pause();
             bgSound.play();
             main.isplay[0]=true;
             main.isplay[2]=false;


         }
         else if(type==2){
             bgSound.pause();
             rain.play();
             main.isplay[0]=false;
             main.isplay[1]=true;
         }else if(type==3){
             rain.pause();
             sand.play();
             main.isplay[1]=false;
             main.isplay[2]=true;
         }
         else if(type==4){
             rain.pause();
             bgSound.play();
             main.isplay[1]=false;
             main.isplay[0]=true;
         }
         else if(type==5){
             sand.pause();
             rain.play();
             main.isplay[2]=false;
             main.isplay[1]=true;
         }
         else if(type==6){
             bgSound.pause();
             sand.play();
             main.isplay[0]=false;
             main.isplay[2]=true;
         }
     },
    main.cameraTouchmove = function (a) {
        this.activeObject || (0 == this.touchLast ? this.touchLast = this.getTouchPosition(a) : (this.touch = this.getTouchPosition(a), this.alpha -= this.alphaSpeed * (this.touch.x - this.touchLast.x), this.beta += this.betaSpeed * (this.touch.y - this.touchLast.y), this.touchLast = this.touch))
    },
    main.cameraTouchend = function () {
        this.touchLast = this.touch = !1
    },
    main.cameraUpdate = function () {
        this.cameraAllow && (this.beta = this.beta <= this.betaLimit[0] ? this.betaLimit[0] : this.beta, this.beta = this.beta >= this.betaLimit[1] ? this.betaLimit[1] : this.beta, this.scene.camera.z += this.cameraSpeed * Math.abs(this.alpha - this.box.rotationY) - this.cameraBack, this.scene.camera.z = this.scene.camera.z <= this.cameraLimit[0] ? this.cameraLimit[0] : this.scene.camera.z, this.scene.camera.z = this.scene.camera.z >= this.cameraLimit[1] ? this.cameraLimit[1] : this.scene.camera.z, this.box.rotationX += (this.beta - this.box.rotationX) * this.betaSpeed, this.box.rotationY += (this.alpha - this.box.rotationY) * this.alphaSpeed),
            this.box.updateT(),
            this.scene.camera.updateT()
    },

    /*
    *
    *  @a  资源路径
    *  @b  3d    x坐标
    *  @c  3d    y坐标
    *  @d   是否可以  拖动 !0   不能拖动 ！1
    *  @e   是否开启重力控制  开启重 !0   不开启！1
    */
    main.addObject = function (a, b, c, d, e, f, g, h, i, j, k, l) {
        var m, n;
        for (d = d ? !0 : !1, e = e ? !0 : !1, f = f ? !0 : !1, g = g ? !0 : !1, h = "function" == typeof h ? h : !1, i = i ? i : !1, j = j ? j : !1, k = k ? k : !1, l = l ? l : !1, m = 0; m < a.length; m++) n = new Image,
            n.src = a[m],
            n.alpha = b + m * this.pieceAngle,
            n.beta = c,
            n.isTouch = d,
            n.isOrienter = e,
            n.isClick = f,
            n.isScale = g,
            n.callBack = h,
            n.name = i,
            n.isBoxAnimation = j,
            n.isHide = k,
            n.isText = l,
            n.onload = function () {
                var b, a = new C3D.Plane;
                a.ALPHA = this.alpha,
                    a.BETA = this.beta,
                    a.ORIALPHA = this.alpha,
                    a.ORIBETA = this.beta,
                    a.isClick = this.isClick,
                    a.isScale = this.isScale,
                    a.callBack = this.callBack,
                    a.name = this.name,
                    b = main.getPiecePosition(this.alpha, main.pieceRadius, this.beta),
                    a.size(this.width, this.height, 0).position(b.x, b.y, -b.z).rotation(0, -this.alpha, 0).material({
                        image: this.src
                    }).update(),
                    this.isBoxAnimation ? main.boxAnimation.addChild(a) : this.isText ? main.textAnimation.addChild(a) : main.boxUser.addChild(a),
                this.isTouch && main.addObjectTouch(a),
                this.isOrienter && main.addOrienterObject(a),
                this.isClick && main.addObjectClick(a),
                this.isScale && a.scale(0, 0, 0).updateT(),
                this.isHide && (a.alpha = 0, a.updateV())
            }
    },
    main.addAnimation = function (a, b, c, d, e, f, g, h, i, j) {
        "position" != g && "rotation" != g && "scale" != g && (g = "position"),
            h = h ? h : "linear",
            e.x -= d.x,
            e.y -= d.y,
            e.z -= d.z,
            f = f ? f : 0,
            i = i ? i : 0,
            this.animationTask.push({
                object: a,
                now: b,
                limit: c,
                start: d,
                end: e,
                delayNow: 0,
                delay: f,
                type: g,
                animationType: h,
                callBack: j,
                repeatNow: 0,
                repeat: i,
                repeatStatus: 1
            })
    },
    main.addDomAnimation = function (a, b) {
        "object" != typeof b && (b = {}),
            b.now = b.now ? b.now : 0,
            b.limit = b.limit ? b.limit : 60,
            b.type = b.type ? b.type : "linear",
            b.start = b.start ? b.start : {},
            b.end = b.end ? b.end : {},
            b.callBack = b.callBack ? b.callBack : !1,
            b.delay = b.delay ? b.delay : 0,
            b.delayNow = b.delayNow ? b.delayNow : 0,
            b.starNow = b.starNow ? b.starNow : 0,
            b.starType = b.starType ? b.starType : !1,
            b.starObjs = b.starObjs ? b.starObjs : !1,
            b.object = b.starType ? a : $(a),
            this.animationDomTask.push(b)
    },
    main.addObjectTouch = function (a) {
        $(a.el).bind("touchstart", function (b) {
            b.preventDefault(),
                main.activeTouchStart(a)
        }),
            $(a.el).bind("touchmove", function (a) {
                a.preventDefault(),
                    main.activeTouchMove(a)
            }),
            $(a.el).bind("touchend", function (a) {
                a.preventDefault(),
                    main.activeTouchEnd()
            })
    },
    main.activeTouchStart = function (a) {
        this.activeObject = a
    },
    main.activeTouchMove = function (a) {
        0 == this.activeTouchLast ? this.activeTouchLast = this.getTouchPosition(a) : (this.activeTouch = this.getTouchPosition(a), this.activeObject.ALPHA += this.activeAlphaSpeed * (this.activeTouch.x - this.activeTouchLast.x), this.activeObject.BETA -= this.activeBetaSpeed * (this.activeTouch.y - this.activeTouchLast.y), this.activeTouchLast = this.activeTouch),
            this.limitPiece(this.activeObject),
            this.updatePiecePosition(this.activeObject),
            this.activeObject.updateT(),
        this.activeObject.callBack && this.activeObject.callBack()
    },
    main.activeTouchEnd = function () {
        this.activeObject = !1,
            this.activeTouch = this.activeTouchLast = !1
    },
    main.addOrienterObject = function (a) {
        a.orienterAllow = !0,
            this.dirObjects.push(a)
    },
    main.orienterWork = function (a) {
        var b, c, d, f;
        switch (a.dir) {
            case 0:
                this.dirSpeed = a.g,
                    this.dir = a.g < 0 ? 1 : 2;
                break;
            case 90:
                this.dirSpeed = a.b,
                    this.dir = a.b < 0 ? 1 : 2;
                break;
            case -90:
                this.dirSpeed = a.b,
                    this.dir = a.b < 0 ? 2 : 1
        }
        for (this.cameraAllow && (0 == this.dirFirstAlphaValue && (this.dirFirstAlphaValue = 0 - a.lon, this.dirFirstBetaValue = 0 - a.lat, this.dirLastBetaValueBak = a.lat), b = a.lon + this.dirFirstAlphaValue, c = a.lat + this.dirFirstBetaValue, d = b - this.dirLastAlphaValue, c - this.dirLastBetaValue, Math.abs(d) > 300 && (this.dirLastAlphaValue = b), this.alpha -= b - this.dirLastAlphaValue, this.beta += c - this.dirLastBetaValue, this.dirLastAlphaValue = b, this.dirLastBetaValue = c), f = 0; f < this.dirObjects.length; f++) this.dirObjects[f].orienterAllow && (this.dirObjects[f].ALPHA += this.dirSpeed * this.dirSpeedRate, this.dirObjects[f].BETA += (a.lat - this.dirLastBetaValueBak) / 8, this.limitPiece(this.dirObjects[f]), this.updatePiecePosition(this.dirObjects[f]), this.dirObjects[f].updateT(), this.dirObjects[f].callBack && this.dirObjects[f].callBack());
        this.dirLastBetaValueBak = a.lat
    },
    main.addObjectClick = function (a) {
        a.clickAllow = !0,
            this.clickObjects.push(a)
    },
    main.objectClickWork = function (a) {
        var b, c, d, e;
        for (b = 0; b < this.clickObjects.length; b++) this.clickObjects[b].clickAllow && (c = (this.clickObjects[b].ALPHA - this.alpha) % 360, d = this.clickObjects[b].BETA - this.beta, e = 1e3 / this.window.height(), this.buffer = this.getTouchBeam(a), (Math.abs(c - e * this.buffer.alpha) < this.clickRangle && Math.abs(d - e * this.buffer.beta) < this.clickRangle || Math.abs(c - e * this.buffer.alpha) > 360 - this.clickRangle && Math.abs(d - e * this.buffer.beta) < this.clickRangle) && this.clickObjects[b].callBack && this.clickObjects[b].callBack())
    },
    main.animationWork = function () {
        for (var a = 0; a < this.animationTask.length; a++) this.animationTask[a].object.noAnimation ? this.animationTask.splice(a, 1) : (this.animationTask[a].delayNow += this.animationPX, this.animationTask[a].delayNow > this.animationTask[a].delay && (this.animationTask[a].now = this.animationTask[a].now < 0 ? 0 : this.animationTask[a].now, this.animationTask[a].now = this.animationTask[a].now > this.animationTask[a].limit ? this.animationTask[a].limit : this.animationTask[a].now, this.animationTask[a].object[this.animationTask[a].type](this[this.animationTask[a].animationType](0, this.animationTask[a].now, this.animationTask[a].start.x, this.animationTask[a].end.x, this.animationTask[a].limit), this[this.animationTask[a].animationType](0, this.animationTask[a].now, this.animationTask[a].start.y, this.animationTask[a].end.y, this.animationTask[a].limit), this[this.animationTask[a].animationType](0, this.animationTask[a].now, this.animationTask[a].start.z, this.animationTask[a].end.z, this.animationTask[a].limit)), this.animationTask[a].object.updateT(), this.animationTask[a].now += this.animationPX * this.animationTask[a].repeatStatus, this.buffer = !1, 1 == this.animationTask[a].repeatStatus ? this.animationTask[a].now > this.animationTask[a].limit && (this.buffer = !0) : this.animationTask[a].now < 0 && (this.buffer = !0), this.buffer && (++this.animationTask[a].repeatNow > this.animationTask[a].repeat ? (this.animationTask[a].callBack && this.animationTask[a].callBack(), this.animationTask.splice(a, 1)) : this.animationTask[a].repeatStatus *= -1)))
    },
    main.animationDomWork = function () {
        var a, b;
        for (a = 0; a < this.animationDomTask.length; a++) if (this.animationDomTask[a].starType)        {
            //console.log(this.animationDomTask[a].object);
            if (this.animationDomTask[a].object.starStop) this.animationDomTask.splice(a, 1);
            else if (++this.animationDomTask[a].now > this.animationDomTask[a].limit) {
                for (this.animationDomTask[a].now = 0, b = 0; b < this.animationDomTask[a].starObjs.length; b++) this.buffer = this.getPiece(this.animationDomTask[a].starObjs[b]),
                    this.buffer.alpha = b == this.animationDomTask[a].starNow ? 1 : 0,
                    this.buffer.updateV();
                ++this.animationDomTask[a].starNow >= this.animationDomTask[a].starObjs.length && (this.animationDomTask[a].starNow = 0)
            }
        } else if (this.animationDomTask[a].delayNow += this.animationPX, this.animationDomTask[a].delayNow > this.animationDomTask[a].delay) {
            this.animationDomTask[a].now += this.animationPX,
            this.animationDomTask[a].now > this.animationDomTask[a].limit && (this.animationDomTask[a].now = this.animationDomTask[a].limit);
            for (x in this.animationDomTask[a].start) this.buffer = this[this.animationDomTask[a].type](0, this.animationDomTask[a].now, this.animationDomTask[a].start[x], this.animationDomTask[a].end[x] - this.animationDomTask[a].start[x], this.animationDomTask[a].limit),
                "opacity" != x ? this.animationDomTask[a].object.css(x, this.buffer + "px") : this.animationDomTask[a].object.css(x, this.buffer);
            this.animationDomTask[a].now >= this.animationDomTask[a].limit && (this.animationDomTask[a].callBack && this.animationDomTask[a].callBack(), this.animationDomTask.splice(a, 1))
        }
    },
    main.now = Date.now ||
        function () {
            return (new Date).getTime()
        },
    main.rand = function (a, b) {
        return~~ (Math.random() * (b - a + 1) + a)
    },
    main.getPiece = function (a) {
        var b;
        for (b = 0; b < this.boxUser.children.length; b++) if (this.boxUser.children[b].name == a) return this.boxUser.children[b];
        for (b = 0; b < this.boxAnimation.children.length; b++) if (this.boxAnimation.children[b].name == a) return this.boxAnimation.children[b];
        for (b = 0; b < this.textAnimation.children.length; b++) if (this.textAnimation.children[b].name == a) return this.textAnimation.children[b]
    },
    main.getTouchBeam = function (a) {
        return {
            alpha: 180 * ((a.changedTouches[0].pageX - this.window.width() / 2) / (this.cameraStart + this.pieceRadius)) / Math.PI,
            beta: 180 * (-(a.changedTouches[0].pageY - this.window.height() / 2) / (this.cameraStart + this.pieceRadius)) / Math.PI
        }
    },
    main.getPieceRadius = function (a, b) {
        return a / 2 / Math.sin(b / 2 * this.hd)
    },
    main.getPiecePosition = function (a, b, c) {
        return c = c ? c : 0,
        {
            x: Math.sin(a * this.hd) * b,
            y: -Math.sin(c * this.hd) * b,
            z: Math.cos(a * this.hd) * b
        }
    },
    main.updatePiecePosition = function (a) {
        this.buffer = this.getPiecePosition(a.ALPHA, this.pieceRadius, a.BETA),
            a.position(this.buffer.x, this.buffer.y, -this.buffer.z)
    },
    main.limitPiece = function (a) {
        a.ALPHA - a.ORIALPHA < -this.activeLimitAlpha && (a.ALPHA = a.ORIALPHA - this.activeLimitAlpha),
        a.ALPHA - a.ORIALPHA > this.activeLimitAlpha && (a.ALPHA = a.ORIALPHA + this.activeLimitAlpha),
        a.BETA - a.ORIBETA < -this.activeLimitBeta && (a.BETA = a.ORIBETA - this.activeLimitBeta),
        a.BETA - a.ORIBETA > this.activeLimitBeta && (a.BETA = a.ORIBETA + this.activeLimitBeta)
    },
    main.getTouchPosition = function (a) {
        return {
            x: a.changedTouches[0].pageX,
            y: a.changedTouches[0].pageY
        }
    },
    main.easeOut = function (a, b, c, d, e) {
        return -d * (b /= e) * (b - 2) + c
    },
    main.linear = function (a, b, c, d, e) {
        return d * b / e + c
    },
    main.easeIn = function (a, b, c, d, e) {
        return d * (b /= e) * b + c
    },
    main.easeInOut = function (a, b, c, d, e) {
        return (b /= e / 2) < 1 ? d / 2 * b * b + c : -d / 2 * (--b * (b - 2) - 1) + c
    },
    main.easeInOutExpo = function (a, b, c, d, e) {
        var f = 1.70158,
            g = 0,
            h = d;
        return 0 == b ? c : 1 == (b /= e) ? c + d : (g || (g = .3 * e), h < Math.abs(d) ? (h = d, f = g / 4) : f = g / (2 * Math.PI) * Math.asin(d / h), h * Math.pow(2, -10 * b) * Math.sin((b * e - f) * 2 * Math.PI / g) + d + c)
    };